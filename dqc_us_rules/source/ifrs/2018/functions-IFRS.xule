/** 
DQC Rules
 (c) Copyright 2017 - 2018, XBRL US Inc. All rights reserved.
 See https://xbrl.us/dqc-license for license information.
 See https://xbrl.us/dqc-patent for patent infringement notice.
Taxonomy: IFRS 2018
Original Release: Version 6
**/



/** 
 * is_extension
 * 
 * This function Checks if the concept is an extension taxonomy element  .
 * 
 * @param concept - $test_extension - Passes concept to check if it is an extension concept.
 * @return boolean - Returns true if the concept is an extension concept.
 **/

function is_extension($test_extension)
	$ifrs-gaap.concept($test_extension.name)== none

/** 
 * is_base
 * 
 * This function Checks if the concept is a base taxonomy element  .
 * 
 * @param concept - $test_base - Passes concept to check if it is a base concept.
 * @return boolean - Returns true if the concept is a base concept.
**/

function is_base($test_base)
	$ifrs-gaap.concept($test_base.name)!= none

/** 
 * effective_weight_is_positive
 * 
 * This function checks if effective weight between two concepts is positive.
 * 
 * @param concept - $topConcept - Passes a parent concept to determine the effective weight relative to a calculation decendant.
 * @param concept - $bottomConcept - Passes a descendant concept to compare against an ancestor defined in the first parameter
 * @return boolean - Returns true if the effective weight is positive else returns false
**/

function effective_weight_is_positive($topConcept,$bottomConcept)
	$effectiveWeight = taxonomy().effective-weight-network($topConcept, $bottomConcept);
	for ($network in $effectiveWeight)
		$network[1] > 0


/** 
 * effective_weight_is_negative
 * 
 * This function checks if effective weight between two concepts is negative
 * 
 * @param concept - $topConcept - Passes a parent concept to determine the effective weight relative to a calculation decendant.
 * @param concept - $bottomConcept - Passes a descendant concept to compare against an ancestor defined in the first parameter
 * @return boolean - Returns true if the effective weight is negative else returns false
**/

function effective_weight_is_negative($topConcept,$bottomConcept)
	$effectiveWeight = taxonomy().effective-weight-network($topConcept, $bottomConcept);
	for ($network in $effectiveWeight)
		$network[1] < 0

/** 
 * tolerance_for_decimals
 * 
 * This function works out the tolerance between 2 values with different decimals with a tolerance factor.
 * 
 * @param factset - $left - Passes a factset value to compare to a second parameter called $right
 * @param factset - $right - Passes a factset value to compare to the first parameter called $left
 * @param integer - $decimal_tolerance_factor - Integer value that defines how different the values can be
 * @return boolean - Returns true if the two values provided are outside of the tolerance range.
**/

function tolerance_for_decimals($left, $right, $decimal_tolerance_factor)

$left_decimal = if $left.decimals == none
					inf else $left.decimals;
					
$right_decimal = if $right.decimals == none
					inf else $right.decimals;
					
$tolerance1 = if ($left_decimal < $right_decimal) 
					$left_decimal
				else 	
					$right_decimal;
$tolerance2 = if ($tolerance1 == inf) 
					0
				else 	
					(10.power(-1 * $tolerance1)) * $decimal_tolerance_factor;

if (abs(round($left,$tolerance1) - round($right,$tolerance1)) > $tolerance2) 
	true
else 
	false 

/** 
 * match_set_substring
 * 
 * This functiondetermines if the name of the dimension member of a fact includes the sub-string passed in the second parameter.
 *
**/
	
function match_set_substring($fact, $match_member_string_component)
any(set(for $x in $fact.dimensions-explicit.values.name.local-name.lower-case
	for $y in $match_member_string_component
	$y in $x))
	
	

function not_elim_adjust($fact)

/* never touch this */
all(set(
		for ($x in $exclude_non_neg_axis_members)
		/* get the axis name which is the first thing in the list */
			$axis_name = $x[1];

		/* get the set of elimination and adjustment members, which is the second thing on the list */
			$elim_adjust_members = $x[2];
			
			if ($fact.dimension($axis_name)!= none) 
				not $elim_adjust_members.contains($fact.dimension($axis_name).name)
			else
				true
		)
)
