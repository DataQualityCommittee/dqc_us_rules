/**
DQC Rules
 (c) Copyright 2017 - 2022, XBRL US Inc. All rights reserved.
 See https://xbrl.us/dqc-license for license information.
 See https://xbrl.us/dqc-patent for patent infringement notice.
Taxonomy: IFRS 2022
Release Version 17
**/

rule-name-prefix DQR

ASSERT IFRS.0118.9727 SATISFIED

$rule_id = (rule-name().split('.'))[rule-name().split('.').length];
/**  Get the latest Report Period**/
$document_period_facts = list({covered @concept.local-name in list('NameOfReportingEntityOrOtherMeansOfIdentification','LegalFormOfEntity','DomicileOfEntity','CountryOfIncorporation','AddressOfRegisteredOfficeOfEntity','PeriodCoveredByFinancialStatements','DescriptionOfPresentationCurrency','DateOfEndOfReportingPeriod2013')});

if $document_period_facts.length < 1
	skip
else
$document_period = first($document_period_facts)
$document_period_end_date = $document_period.period.end - time-span("P1D");
$document_period_start_date = $document_period.period.start

/** Get tables for financial statement items **/

$statementCubes = FILTER taxonomy().cubes where ($item.primary-concepts.name.contains(StatementOfFinancialPositionAbstract) or $item.primary-concepts.name.contains(IncomeStatementAbstract)  or $item.primary-concepts.name.contains(StatementOfCashFlowsAbstract))
and (not $item.drs-role.uri.lower-case.contains('parenthetical'))
and (not $item.drs-role.description.lower-case.contains('parenthetical')) 
and (not $item.drs-role.uri.lower-case.contains('equity'))
and (not $item.drs-role.description.lower-case.contains('equity')) 
and (not $item.drs-role.uri.lower-case.contains('deficit'))
and (not $item.drs-role.description.lower-case.contains('deficit')) 
and (not $item.drs-role.uri.lower-case.contains('stockholders')) 
and (not $item.drs-role.description.lower-case.contains('stockholders')) 
and (not $item.drs-role.uri.lower-case.contains('capital')) 
and (not $item.drs-role.description.lower-case.contains('capital')) 
and (not $item.drs-role.uri.lower-case.contains('investment')) 
and (not $item.drs-role.description.lower-case.contains('investment')) 
and (not $item.drs-role.uri.lower-case.contains('changes')) 
and (not $item.drs-role.description.lower-case.contains('changes')) 
and (not $item.drs-role.uri.lower-case.contains('shareholder')) 
and (not $item.drs-role.description.lower-case.contains('shareholder')) 
and (not $item.drs-role.uri.lower-case.contains('convertible')) 
and (not $item.drs-role.description.lower-case.contains('convertible')) 
and (not $item.drs-role.uri.lower-case.contains('preferred'))  
and (not $item.drs-role.description.lower-case.contains('preferred'))  
and (not $item.drs-role.uri.lower-case.contains('temporaryequity')) 
and (not $item.drs-role.description.lower-case.contains('temporaryequity')) 
and (not $item.drs-role.uri.lower-case.contains('redeemable'))
and (not $item.drs-role.description.lower-case.contains('redeemable'))
and (not $item.drs-role.uri.lower-case.contains('netproceedsfromallsources'))
and (not $item.drs-role.description.lower-case.contains('netproceedsfromallsources'))
and (not $item.drs-role.uri.lower-case.contains('membersinterest'))
and (not $item.drs-role.description.lower-case.contains('membersinterest'))
and (not $item.drs-role.uri.lower-case.contains('notes'))
and (not $item.drs-role.description.lower-case.contains('notes'))
and (not $item.drs-role.uri.lower-case.contains('highlights'));

for $cube in $statementCubes.sort
			/** get the calculations aligned with the cube role.  We assume that the same role is used for the cube and the dimension**/
			$calcNetworkSource = navigate summation-item descendants include start role $cube.drs-role.uri returns set (source-name);
			
			$conceptsInCube = filter $cube.facts returns $item.concept.name;

			for $concept_item in $calcNetworkSource
				if $concept_item == none or (length($calcNetworkSource.intersect($conceptsInCube.to-set))==0)
					skip
				else
				
					/** Determine the children of the concept to check **/
					$calcComponents = navigate summation-item children from $concept_item role $cube.drs-role.uri returns  (target-name, weight);

					/** Work out the decimals used in the financial statements **/
					$fs_fact_values_decimals = filter (list({nonils covered @concept in $calcNetworkSource @cube.drs-role = $cube.drs-role})) returns $item.decimals;
					$fs_decimals = most_frequent($fs_fact_values_decimals)
					
					/** Sum the children to get a total. If the child has no value in the default then check if it has values using the dimension being processed. If it does the function takes the members of the dimension and adds them up.  This way if the components of a calc are dimensionalized with no default we will calculate the total.**/

					$addend = sum(list(for $x in $calcComponents
											$targetElement = $x[1];
											$targetWeight = $x[2];
											
											/** IMPORTANT **/
											/**
											** If a number is reported twice and the value is the same but they have different decimals then the arelle
											** processor will eliminate the fact with the lower decimal value and keep the most accurate fact where the
											** values are the same.  Both facts will not be available in the processor. The first(list()) was included for
											** safety so lines don't duplicate.
											**/

											first-value({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals == $fs_decimals} * $targetWeight, first(list({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals >= $fs_decimals})) * $targetWeight, max(list(getDimensionSums($targetElement, $cube, 1, $concept_item))) * $targetWeight, max(list(getDimensionSums($targetElement, $cube, 2, $concept_item))) * $targetWeight, first(list({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals < $fs_decimals})) * $targetWeight)				
									)
									);
					
					/** Capture in a string what calc was performed  above to report in the rule message. **/
					$addend_string = sum(list(for $x in $calcComponents.sort
													$targetElement = $x[1];
													$defaultFact = if exists({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role})
																		true
																	else
																		false;
													

													$DimStringList = list(first-value(getDimensionNames($targetElement , $cube, 1, $concept_item), getDimensionNames($targetElement , $cube, 2, $concept_item)))
													$DimString = filter $DimStringList returns $item[1].string + " Dim Facts: " + $item[3].join(' + ');
													$DimString2 = $DimString.join(' | ');
													$DefaultMessage =  if $defaultFact "" else " (" + $DimString2 + ")";
													
													$factAmt = first-value(
														{nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals == $fs_decimals}.string, 
														first(list({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals >= $fs_decimals})).string,
														max(list(getDimensionSums($targetElement , $cube, 1, $concept_item))).string, max(list(getDimensionSums($targetElement , $cube,2, $concept_item))).string,
														first(list({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals < $fs_decimals})).string)

													$factDecimals = first-value(
														{nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals == $fs_decimals}.decimals, 
														first(list({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals >= $fs_decimals})).decimals, 
														max(list(getDimensionSums($targetElement, $cube, 1, $concept_item))).decimals, max(list(getDimensionSums($targetElement, $cube, 2, $concept_item))).decimals,
														first(list({nonils @concept = $targetElement @cube.drs-role = $cube.drs-role where $fact.decimals < $fs_decimals})).decimals)
													$weight =  if $x[2] == 1
																		"+"
																else
																		"-";
													$strLength = $targetElement.local-name.string.length;
													$pad = sum(list(for $x in range(120 - $strLength - $factAmt.length - $DefaultMessage.length)
																					" " 
																					)
																			);
											"" + $weight + "  \t" + $targetElement.local-name.string + $DefaultMessage + $pad + $factAmt  +  (if $factDecimals < $fs_decimals " (Inconsistent decimals: " +  $factDecimals.string + " )" else skip)  + "\n"
													)
									);
					/** Compare the addends to the sum.  This is only done for the current reporting period. This is to prevent bleed though from incomplete periods, and we know the current period should always be complete.**/
					$sum2 = if taxonomy().concept($concept_item).period-type == duration
								{nonils @concept = $concept_item @cube.drs-role = $cube.drs-role @@period.end = $document_period_end_date @@period.start = $document_period_start_date where $fact.decimals == $fs_decimals}
							else
								{nonils @concept = $concept_item @cube.drs-role = $cube.drs-role @@period.end = $document_period_end_date where $fact.decimals == $fs_decimals};
					
					/** REMOVE DEFAULT FROM CALCULATION TEST **/
					$dimensions = $cube.dimensions;
					$dimObjects = filter $dimensions returns $item.concept.name
					$sum2Dimensions = $sum2.dimensions.keys.name

					/** Option 3 built into Arelle **/

					/** No default defined for a dimension - Option 4 **/

					$DefaultDimensions = navigate dimension-default descendants from (filter $dimensions returns $item.concept.name) returns set (source-name);
					$MissingDefaults = $dimObjects - $DefaultDimensions
					
					/** Label Check - Option 5 **/
					$DefaultPresentation = navigate parent-child children from (filter $dimensions returns $item.concept.name) role $cube.drs-role returns set (source-name, preferred-label, target-name);
					$textDefault = filter $DefaultPresentation where $item[2].text.lower-case.contains('default')
					$MissingDefaultLabel = filter $textDefault returns $item[1]

					/** Label Check - Option 6 **/
					/** Check any table with legal entity Axis don't check default **/
					
					$LegalEntityAxisInCube = filter $dimObjects where $item.local-name == 'LegalEntityAxis'returns $item
					$ConsolidatedEntityAxisInCube = filter $dimObjects where $item == ConsolidatedAndSeparateFinancialStatementsAxis returns $item
					$ContinuingAndDiscontinuedOperationsInCube = filter $dimObjects where $item == ContinuingAndDiscontinuedOperationsAxis returns $item

					/** Dimension to check **/
					/** Identify the axis that indicate their default values should not have a  calculation check
					Add $ContinuingAndDiscontinuedOperationsInCube for those calc on the income statement that are always continuing ops.**/
					$AxisDefaultsNotToCheck = $MissingDefaultLabel + $MissingDefaults + $LegalEntityAxisInCube + $ConsolidatedEntityAxisInCube + $ContinuingAndDiscontinuedOperationsInCube
					
					/** Identify if the current iteration is a default by taking the table dimensions deducting the dimensions
					of the fact and seeing if the resulting set intersects with the axis that are not checked.  If this is greater than zero
					it means that the sum fact does not have a dimension (default) and the default of the dimensions has been tagged not to add. **/

					$FactDimensionsWithDefaultToSkip = $AxisDefaultsNotToCheck intersect ($dimObjects - $sum2Dimensions)

					$DefaultCheckflag = if ($AxisDefaultsNotToCheck).length == 0
											false
									else 
										if ($dimObjects - $sum2Dimensions).length == 0
											false
										else
											if ($FactDimensionsWithDefaultToSkip.length) > 0
												true
											else
												false
										
					/** END ***/

					if $addend == none or $sum2 == none or $DefaultCheckflag
						skip
					else
						tolerance_for_decimals_comp($sum2, $addend, $sum2.decimals, 2)

message
"The statement {$cube.drs-role.description} includes an inconsistent calculation. The value of the concept {$concept_item} of {$sum2} {if length($sum2.dimensions.values) > 0 'for ' + $sum2.dimensions.values.join(',') else "in the default"} should be equal to the sum of its child components defined in the calculation linkbase. The sum of these child components is {$addend}. The values of the addends is determined by adding the values of the child concepts with a decimal value of {$fs_decimals.string}. All values in the financial statements should use the same decimal value. If a value is not available then the values associated with the members of the dimension  are used to complete the calculation. The values reported in the financial statement in the current reporting period of {$sum2.period} should be complete if the financial statement is to be mathematically accurate and complete. The components of {$concept_item} that should add to {$sum2} are comprised of the following:

{$addend_string}

The addends are calculated based on the calculation linkbase defined for {$cube.drs-role.description}. If addends are missing then the calculation tree should be amended. The rule will add dimension components as well, so if the calculation is correct and the breakdown is a dimension, then check to ensure that the dimensions are defined correctly. Values calculated by adding a dimension member are shown in the calculation.


Total Element : {$concept_item}
Total Value : {$sum2} 
Total period : {$sum2.period} 
Dimensions : {$sum2.dimensions.join(', ','=')}
Decimals : {$sum2.decimals} 
Rule Element Id:{$rule_id}
Rule version: {$ruleVersion}"


severity error

effectiveDate $effective_dates[$rule_id]

rule-focus $sum2