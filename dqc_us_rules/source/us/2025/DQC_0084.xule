/**
DQC Rules
 (c) Copyright 2017 - 2025, XBRL US Inc. All rights reserved.
 See https://xbrl.us/dqc-license for license information.
 See https://xbrl.us/dqc-patent for patent infringement notice.
Taxonomy: US GAAP 2024
**/


assert US.0084.9298 satisfied

$rule_id = (rule-name().split('.'))[rule-name().split('.').length];

/** DQCRT RULE **/
if not applicable_form(rule-name())
	skip
else


if set('N-CSR','N-CSRS', 'N-CSR/A', 'N-CSRS/A').contains([covered @concept.local-name ='DocumentType'])
	skip
else
$decimal_tolerance_factor = 3

$fact1 = {nonils @period = * where $fact.concept.is-monetary and $fact.concept.period-type == duration
	  	 	    and not $fact.concept.name.local-name.lower-case.contains('average') 
				and $fact.dimensions-typed.keys.length == 0  /* TODO - Exclude typed dimensions as they cause a xule error as tries to recognize the typed value as a qname. XULE Processor - line 4796, in convert_value_to_qname */
	  	 	    and not $NON_ADDITIVE_DURATION_CONCEPTS.contains($fact.concept.name)};

/** less than three as 2 period represents the original fact and one other fact so no check possible. 3 is a possible check with 2 addends = 1 sum. **/
if list({nonils @period=* where ($fact.period.start) >= ($fact1.period.start) and $fact.period.end <= $fact1.period.end}).length < 3
	skip
else					
	$sub-periods =  
		$p1 = {nonils @period=* where ($fact.period.start + time-span("P0D")) == ($fact1.period.start + time-span("P0D")) and $fact.period.end < $fact1.period.end};
		$p2 = {nonils @period=* where ($fact.period.start + time-span("P0D")) == ($p1.period.end + time-span("P0D"))};
		if (($p2.period.end + time-span("P0D")) == ($fact1.period.end + time-span("P0D")))
			list($p1, $p2)
			
		else
			$p3 = {nonils @period = * where ($fact.period.start + time-span("P0D")) == ($p2.period.end + time-span("P0D"))};
			if (($p3.period.end + time-span("P0D")) == ($fact1.period.end + time-span("P0D")))
				list($p1, $p2, $p3)
			else
				$p4 = {nonils @period=* where ($fact.period.start + time-span("P0D")) == ($p3.period.end + time-span("P0D"))};
				if (($p4.period.end + time-span("P0D")) == ($fact1.period.end + time-span("P0D")))
					list($p1, $p2, $p3, $p4)
				else
					list()
					;
					
	if $sub-periods.length == 0
		skip
	else
		$sum-periods = sum(list(for ($x in $sub-periods) $x));
		$all-decimals = set(for ($y in $sub-periods) $y.decimals);
		$min-decimals_sub = min(filter $all-decimals where $item.decimals != INF );
		$sum-decimals = $fact1.decimals;
		$min-decimals = min(list($sum-decimals,$min-decimals_sub));
		
		$it-does-not-sum = 
			if ($min-decimals == none)
				$fact1 != $sum-periods
			else
				$componentNum = $sub-periods.length;
				$scale = 10.power($min-decimals * - 1);
				$tolerance = ($componentNum - 1) * $scale * $decimal_tolerance_factor;

				/** Check if decimals are 0 and the diff is immaterial using a 1% threshold and used flagged as immaterial by the filer **/
				if (($fact1 - $sum-periods).abs < $fact1.abs * 0.01) and $min-decimals == 0 and list({covered @concept.local-name = 'ImmaterialDifferenceFlag'}).length > 0
					false
				else
					($fact1 - $sum-periods).abs > $tolerance;
		if $it-does-not-sum
			$period-message = (filter $sub-periods returns " \t" + $item.period.string +" \t" + $item.string +" \t Decimals: " + $item.decimals.string).join("\n");
			if (is_base($fact1.concept, $ALL_BASE_TAXONOMIES_ELTS))
				true
			else
				false
		else
			false
message
"Sum of the cumulative periods of {$sum-periods} for {$fact1.concept.name} does not match the reported total of {$fact1}, a difference of {abs($sum-periods - $fact1)}.

Period values are:\n{$period-message}\n\nThis rule takes into account possible rounding of values across periods and the decimals associated with each fact. This rule used a tolerance of {$tolerance} which is calculated by taking the lowest decimal value used in the calculation of {$min-decimals}. If there is a difference between the sum of the periods and the aggregate value reported the difference may be due to incorrect decimals associated with the individual fact values. The filer should check that the fact values do not have a decimal value that implies a higher level of accuracy than intended.
{if (($fact1 - $sum-periods).abs < $fact1.abs * 0.01) and $min-decimals == 0
'
In those rare cases where there are small immaterial differences that are less than 1% of the total and decimals are zero the rule can be overidden. This is performed by creating an extension element called ImmaterialDifferenceFlag.  If this element has any value in any context in the instance then the immaterial difference will not result in an error.' else ''}

The rule excludes elements in the base taxonomy that cannot be aggregated such as an average, maximum or minimum value.

The properties of this {$fact1.concept.name} fact are:

Period :{$fact1.period}
Dimensions : {$fact1.dimensions.join(', ','=')}
Unit : {$fact1.unit}
Decimals: {$fact1.decimals}

Rule Element Id:{$rule_id}
Rule version: {$ruleVersion}"

severity error

effectiveDate $effective_dates[$rule_id]

rule-focus $fact1
