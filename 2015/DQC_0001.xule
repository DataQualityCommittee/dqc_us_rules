/**
DQC Rules
Copyright (c) 2017 XBRL US Inc.
Taxonomy: US GAAP 2017
**/

rule-name-prefix DQC

assert US.0001.51 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase CHANGE TO - dimensions dimension-member **/

$member_extension = navigate dimensions dimension-member descendants from FairValueByFairValueHierarchyLevelAxis returns set (target-name);

/** Define allowable extensions with the qname function **/

/** In 2018 InvestmentsNetAssetValueMember has to be removed **/

$allowable_extensions = set(qname($extension_ns,'FairValueInputsLevel1AndLevel2Member'), 
						qname($extension_ns,'FairValueInputsLevel2AndLevel3Member'), 
						/**qname($extension_ns,'InvestmentsNetAssetValueMember'), **/
						qname($extension_ns,'FairValueMeasuredAtNetAssetValuePerShareMember'));

/** Union the sets**/

$allowed_members = $allowable_extensions + $member_USGAAP_fair_value;

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/
/** We have used covered because if it was not covered then the processor looks for alignmnet. This means that the exist will run and if it does not get a result then the processor will stop processing results. i.e. the non existence of the fact means the iteration does not run and the else statement does not run.
**/
	for ($member in $unallowed_members)
		$fact = {covered @FairValueByFairValueHierarchyLevelAxis = $member};
		if exists($fact)
			$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the FairValueByFairValueHierarchyLevelAxis and the unallowable member {$member.local-name}. The filer should use members from the US GAAP taxonomy that are children of the FairValueByFairValueHierarchyLevelAxis axis or the allowable extensions of : {$allowable_extensions.join(', ')}.

The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
			true
		else 
			$message_for_fact = " The member {$member.local-name} is used on the axis FairValueByFairValueHierarchyLevelAxis. There are no facts associated with this member and axis.";
			true


message
"{$message_for_fact}


Rule Element Id:51
Rule Version: 2.0"

severity error


assert US.0001.52 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase **/

$allowed_members = navigate dimensions dimension-member descendants from ReclassificationOutOfAccumulatedOtherComprehensiveIncomeAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from ReclassificationOutOfAccumulatedOtherComprehensiveIncomeAxis returns set (target-name);

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/

for ($member in $unallowed_members)
	$fact = {covered @ReclassificationOutOfAccumulatedOtherComprehensiveIncomeAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the ReclassificationOutOfAccumulatedOtherComprehensiveIncomeAxis and the unallowable member {$member.local-name}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
			true
	else 
			$message_for_fact = " The member {$member.local-name}is inappropriately used on the axis ReclassificationOutOfAccumulatedOtherComprehensiveIncomeAxis. The only members allowed on this axis are {$allowed_members.join(', ')} . There are no facts associated with this member and axis.";
			true

message
"{$message_for_fact}

Rule Element Id:52
Rule Version: 2.0"

severity error

assert US.0001.53 satisfied

$base_members = navigate dimensions dimension-member descendants from OtherOwnershipInterestsByNameAxis where is_base($relationship.target) returns set (target-name);
$allowed_base_member = set(OtherOwnershipInterestsNameDomain);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @OtherOwnershipInterestsByNameAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the OtherOwnershipInterestsByNameAxis and the base taxonomy member {$member.local-name}. Only extension members should be used with the axis OtherOwnershipInterestsByNameAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis OtherOwnershipInterestsByNameAxis. The only members allowed on this axis are extension members defined by the filer. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:53
Rule Version: 2.0"

severity error


assert US.0001.54 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase **/

/** Use nested navigation as the LegalEntityAxis in the US GAAP taxonomy is not a valid hypercube in all cases so the dimensions will not return all members. Specifically the 190000 group **/
$allowed_members_lea = navigate domain-member descendants include start
     from (navigate dimension-domain children
           from dei:LegalEntityAxis
           taxonomy $us-gaap returns set)
     taxonomy $us-gaap
     returns set (target-name);
$allowed_members_FHLB = navigate dimensions dimension-member descendants from FederalHomeLoanBankAdvancesBranchOfFHLBBankAxis taxonomy $us-gaap returns set (target-name);

$allowed_base_member = set(PredecessorMember, CoVenturerMember, SpinOffMember, PartnershipMember, LimitedLiabilityCompanyMember, TrustForBenefitOfEmployeesMember);

$member_extension = navigate dimensions dimension-member descendants from dei:LegalEntityAxis where is_base($relationship.target) returns set (target-name);

$allowed_members = $allowed_members_lea + $allowed_members_FHLB + $allowed_base_member;

$unallowed_base_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/

	for ($member in $unallowed_base_members)
		$fact = {covered @dei:LegalEntityAxis = $member};
		if exists($fact)
			$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the LegalEntityAxis and the unallowable member {$member.local-name} Only extension members should be used with the axis LegalEntityAxis other than the members predefined in the US-GAAP taxonomy. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
				true
		else 
				$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis LegalEntityAxis. The only members allowed on this axis are extensions or products defined in the US GAAP taxonomy. There are no facts associated with this member and axis.";
				true

message
"{$message_for_fact}

Rule Element Id:69
Rule Version: 2.0"

severity error




assert US.0001.56 satisfied

$base_members = navigate dimensions dimension-member descendants from NoncashOrPartNoncashDivestituresByUniqueNameAxis where is_base($relationship.target) returns set (target-name);
$allowed_base_member = set(NoncashOrPartNoncashDivestitureNameDomain);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @NoncashOrPartNoncashDivestituresByUniqueNameAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the NoncashOrPartNoncashDivestituresByUniqueNameAxis and the base taxonomy member {$member.local-name}. Only extension members should be used with the axis NoncashOrPartNoncashDivestituresByUniqueNameAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis NoncashOrPartNoncashDivestituresByUniqueNameAxis. The only members allowed on this axis are extension members defined by the filer. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:56
Rule Version: 2.0"

severity error


assert US.0001.57 satisfied

$base_members = navigate dimensions dimension-member descendants from ScheduleOfEquityMethodInvestmentEquityMethodInvesteeNameAxis where is_base($relationship.target) returns set (target-name);
$allowed_base_member = set(EquityMethodInvesteeNameDomain);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @ScheduleOfEquityMethodInvestmentEquityMethodInvesteeNameAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the ScheduleOfEquityMethodInvestmentEquityMethodInvesteeNameAxis and the base taxonomy member {$member.local-name}. Only extension members should be used with the axis ScheduleOfEquityMethodInvestmentEquityMethodInvesteeNameAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis ScheduleOfEquityMethodInvestmentEquityMethodInvesteeNameAxis. The only members allowed on this axis are extension members defined by the filer. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:57
Rule Version: 2.0"

severity error


assert US.0001.58 satisfied

$base_members = navigate dimensions dimension-member descendants from CounterpartyNameAxis where is_base($relationship.target) returns set (target-name);
$allowed_base_member = set(RepurchaseAgreementCounterpartyNameDomain, AffiliatedEntityMember, InvestorMember, VariableInterestEntityNotPrimaryBeneficiaryMember, ChiefFinancialOfficerMember, IndividualMember, GovernmentMember, GuarantorSubsidiariesMember, SubsidiaryIssuerMember, DirectorMember, ChiefExecutiveOfficerMember, ChiefOperatingOfficerMember, GeneralPartnerMember, CorporateJointVentureMember, SubsidiaryOfCommonParentMember);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @CounterpartyNameAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the CounterpartyNameAxis and the base taxonomy member {$member.local-name}. Only extension members should be used with the axis CounterpartyNameAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis CounterpartyNameAxis. The only members allowed on this axis are extension members defined by the filer and the following members in the US-GAAP taxonomy {$allowed_base_member.join(', ')} . There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:58
Rule Version: 2.0"

severity error

assert US.0001.59 satisfied

$base_members = navigate dimensions dimension-member descendants from PlanNameAxis where is_base($relationship.target) returns set (target-name);
$allowed_base_member = navigate dimensions dimension-member descendants from PlanNameAxis taxonomy $us-gaap returns set (target-name);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @PlanNameAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the PlanNameAxis and the base taxonomy member {$member.local-name}. Only extension members should be used with the axis PlanNameAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis PlanNameAxis. The only members allowed on this axis are extension members defined by the filer. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:59
Rule Version: 2.0"

severity error


assert US.0001.60 satisfied

$base_members = navigate dimensions dimension-member descendants from DefinedContributionPlanNameAxis where is_base($relationship.target) returns set (target-name);
$allowed_base_member = navigate dimensions dimension-member descendants from DefinedContributionPlanNameAxis taxonomy $us-gaap returns set (target-name);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @DefinedContributionPlanNameAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the DefinedContributionPlanNameAxis and the base taxonomy member {$member.local-name}. Only extension members should be used with the axis DefinedContributionPlanNameAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis DefinedContributionPlanNameAxis. The only members allowed on this axis are extension members defined by the filer. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:60
Rule Version: 2.0"

severity error


assert US.0001.61 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase **/

$allowed_members = navigate dimensions dimension-member descendants from RangeAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from RangeAxis returns set (target-name);

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/

	for ($member in $unallowed_members)
		$fact = {covered @RangeAxis = $member};
		if exists($fact)
			$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the RangeAxis and the unallowable member {$member}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
				true
		else 
				$message_for_fact = "The member {$member} is inappropriately used on the axis RangeAxis. The only members allowed on this axis are {$allowed_members.join(', ')} . There are no facts associated with this member and axis.";
				true

message
"{$message_for_fact}

Rule Element Id:61
Rule Version: 2.0"

severity error


assert US.0001.62 satisfied

$member_USGAAP = navigate domain-member descendants include start
     from (navigate dimension-domain children
           from CurrencyAxis
           taxonomy $us-gaap returns set)
     taxonomy $us-gaap
     returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from CurrencyAxis returns set (target-name);

/** Define allowable extensions with the qname function **/

$allowable_extensions = set(qname($extension_ns,'SICAD1Member'), qname($extension_ns,'SICAD2Member'), qname($extension_ns,'OtherCurrencyMember'), qname($extension_ns,'NonUSDollarMember'),qname($extension_ns,'CENCOEXMember'),qname($extension_ns,'SICADMember'),qname($extension_ns,'SIMADIMember'),qname($extension_ns,'DIPROMember'),qname($extension_ns,'DICOMMember'));

/** Union the sets**/

$allowed_members = $allowable_extensions + $member_USGAAP;

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/
/** We have used covered because if it was not covered then the processor looks for alignmnet. This means that the exist will run and if it does not get a result then the processor will stop processing results. i.e. the non existence of the fact means the iteration does not run and the else statement does not run.
**/
for ($member in $unallowed_members)
	$fact = {covered @CurrencyAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the CurrencyAxis and the unallowable member {$member}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is used on the axis CurrencyAxis. The Currency Axis should only be used with the members defined in the US GAAP taxonomy or the followng extension members: {$allowable_extensions.join(', ')} .There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:62
Rule Version: 2.0"

severity error


assert US.0001.63 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase CHANGE TO - dimensions dimension-member **/

$member_USGAAP = navigate dimensions dimension-member descendants from PositionAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from PositionAxis returns set (target-name);

/** Define allowable extensions with the qname function **/

$allowable_extensions = set(qname($extension_ns,'NetLongPositionMember'), qname($extension_ns,'NetShortPositionMember'));

/** Union the sets**/

$allowed_members = $allowable_extensions + $member_USGAAP;

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/
/** We have used covered because if it was not covered then the processor looks for alignmnet. This means that the exist will run and if it does not get a result then the processor will stop processing results. i.e. the non existence of the fact means the iteration does not run and the else statement does not run.
**/
for ($member in $unallowed_members)
	$fact = {covered @PositionAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the PositionAxis and the unallowable member {$member.local-name}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is used on the axis PositionAxis. The Position Axis should only be used with the members defined in the US GAAP taxonomy or the followng extension members: {$allowable_extensions.join(', ')} .There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:63
Rule Version: 2.0"

severity error

assert US.0001.64 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase **/

$allowed_members = navigate dimensions dimension-member descendants from FairValueByMeasurementFrequencyAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from FairValueByMeasurementFrequencyAxis returns set (target-name);

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/

for ($member in $unallowed_members)
	$fact = {covered @FairValueByMeasurementFrequencyAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the FairValueByMeasurementFrequencyAxis and the unallowable member {$member.local-name}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
			true
	else 
			$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis FairValueByMeasurementFrequencyAxis. The only members allowed on this axis are {$allowed_members.join(', ')} . There are no facts associated with this member and axis.";
			true

message
"{$message_for_fact}

Rule Element Id:64
Rule Version: 2.0"

severity error

assert US.0001.65 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase CHANGE TO - dimensions dimension-member **/

$member_USGAAP = navigate dimensions dimension-member descendants from FairValueByMeasurementBasisAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from FairValueByMeasurementBasisAxis returns set (target-name);

/** Define allowable extensions with the qname function **/

$allowable_extensions = set(qname($extension_ns,'InvestmentsNetAssetValueMember'));

/** Union the sets**/

$allowed_members = $allowable_extensions + $member_USGAAP;

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/
/** We have used covered because if it was not covered then the processor looks for alignmnet. This means that the exist will run and if it does not get a result then the processor will stop processing results. i.e. the non existence of the fact means the iteration does not run and the else statement does not run.
**/
for ($member in $unallowed_members)
	$fact = {covered @FairValueByMeasurementBasisAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the FairValueByMeasurementBasisAxis and the unallowable member {$member.local-name}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is used on the axis FairValueByMeasurementBasisAxis. The FairValueByMeasurementBasisAxis should only be used with the members defined in the US GAAP taxonomy or the followng extension members: {$allowable_extensions.join(', ')} .There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:65
Rule Version: 2.0"

severity error


assert US.0001.66 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase CHANGE TO - dimensions dimension-member **/

$member_USGAAP = navigate dimensions dimension-member descendants from HedgingDesignationAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from HedgingDesignationAxis returns set (target-name);

/** Define allowable extensions with the qname function **/

$allowable_extensions = set(qname($extension_ns,'NotDesignatedAsHedgingInstrumentEconomicHedgesMember'), qname($extension_ns,'NotDesignatedAsHedgingInstrumentTradingMember'));

/** Union the sets**/

$allowed_members = $allowable_extensions + $member_USGAAP;

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/
/** We have used covered because if it was not covered then the processor looks for alignmnet. This means that the exist will run and if it does not get a result then the processor will stop processing results. i.e. the non existence of the fact means the iteration does not run and the else statement does not run.
**/
for ($member in $unallowed_members)
	$fact = {covered @HedgingDesignationAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the HedgingDesignationAxis and the unallowable member {$member.local-name}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is used on the axis HedgingDesignationAxis. The HedgingDesignationAxis should only be used with the members defined in the US GAAP taxonomy or the followng extension members: {$allowable_extensions.join(', ')} .There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:66
Rule Version: 2.0"

severity error

assert US.0001.69 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase **/

$allowed_members_product = navigate dimensions dimension-member descendants from ProductOrServiceAxis taxonomy $us-gaap returns set (target-name);
$allowed_members_reinsurance = navigate dimensions dimension-member descendants from ReinsurancePremiumsForInsuranceCompaniesByProductSegmentAxis taxonomy $us-gaap returns set (target-name);
$allowed_members_aircraft = navigate dimensions dimension-member descendants from AircraftTypeAxis taxonomy $us-gaap returns set (target-name);
$allowed_members_malpractice_insurance = navigate dimensions dimension-member descendants from ScheduleOfMalpracticeInsuranceTypeAndTierIdentifierAxis taxonomy $us-gaap returns set (target-name);

$allowed_base_member = set(AuctionRateSecuritiesMember, AutomobileLoanMember, CommercialLoanMember, CommercialRealEstateMember, ConstructionLoansMember, ConsumerLoanMember, CrudeOilMember, FuelMember, GeneralLiabilityMember, HeatingOilMember, HomeEquityLoanMember, HomeEquityMember, LetterOfCreditMember, LineOfCreditMember, LoansMember, MortgageLoansOnRealEstateMember, NaturalGasLiquidsReservesMember, NaturalGasReservesMember, OilReservesMember, ProfessionalMalpracticeLiabilityMember, RealEstateLoanMember, ResidentialMortgageMember, SyntheticOilMember);

$member_extension = navigate dimensions dimension-member descendants from ProductOrServiceAxis where is_base($relationship.target) returns set (target-name);

$allowed_members = $allowed_members_product + $allowed_members_reinsurance + $allowed_members_aircraft + $allowed_members_malpractice_insurance + $allowed_base_member;

$unallowed_base_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/

	for ($member in $unallowed_base_members)
		$fact = {covered @ProductOrServiceAxis = $member};
		if exists($fact)
			$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the ProductOrServiceAxis and the unallowable member {$member.local-name} Only extension members should be used with the axis ProductOrServiceAxis other than the members predefined in the US-GAAP taxonomy. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
				true
		else 
				$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis ProductOrServiceAxis. The only members allowed on this axis are extensions or products defined in the US GAAP taxonomy. There are no facts associated with this member and axis.";
				true

message
"{$message_for_fact}

Rule Element Id:69
Rule Version: 2.0"

severity error


assert US.0001.70 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase CHANGE TO - dimensions dimension-member **/

$member_USGAAP = navigate dimensions dimension-member descendants from ConsolidationItemsAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from ConsolidationItemsAxis returns set (target-name);

/** Define allowable extensions with the qname function **/

$allowable_extensions = set(qname($extension_ns,'CorporateReconcilingItemsAndEliminationsMember'), qname($extension_ns,'CorporateAndReconcilingItemsMember'), qname($extension_ns,'CorporateAndEliminationsMember'), qname($extension_ns,'EliminationsAndReconcilingItemsMember'), qname($extension_ns,'OperatingSegmentsAndCorporateNonSegmentMember'));

/** Union the sets**/

$allowed_members = $allowable_extensions + $member_USGAAP;

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/
/** We have used covered because if it was not covered then the processor looks for alignmnet. This means that the exist will run and if it does not get a result then the processor will stop processing results. i.e. the non existence of the fact means the iteration does not run and the else statement does not run.
**/
for ($member in $unallowed_members)
	$fact = {covered @ConsolidationItemsAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the HedgingDesignationAxis and the unallowable member {$member.local-name}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is used on the axis ConsolidationItemsAxis. The ConsolidationItemsAxis should only be used with the members defined in the US GAAP taxonomy or the followng extension members: {$allowable_extensions.join(', ')}. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:70
Rule Version: 2.0"

severity error


assert US.0001.71 satisfied

$not_allowed_base_member_tree = navigate dimensions dimension-member descendants from DefinedBenefitPlansDisclosuresDefinedBenefitPlansAxis taxonomy $us-gaap returns set (target-name);

$base_members = navigate dimensions dimension-member descendants from DefinedBenefitPlanByPlanAssetCategoriesAxis returns set (target-name);

$unallowed_base_members = $base_members intersect $not_allowed_base_member_tree;

for ($member in $unallowed_base_members)
	$fact = {covered @DefinedBenefitPlanByPlanAssetCategoriesAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the DefinedBenefitPlanByPlanAssetCategoriesAxis and the base taxonomy member {$member.local-name}. Members that represent various types of pension plans should not be used on this axis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis DefinedBenefitPlanByPlanAssetCategoriesAxis. Members that are children of the axis DefinedBenefitPlansDisclosuresDefinedBenefitPlansAxis represent various types of pension plans should not be used on this axis.";
		true


message
"{$message_for_fact}

Rule Element Id:71
Rule Version: 2.0"

assert US.0001.72 satisfied

$base_members = navigate dimensions dimension-member descendants from AwardDateAxis where is_base($relationship.target) returns set (target-name);
$allowed_base_member = navigate dimensions dimension-member descendants from AwardDateAxis taxonomy $us-gaap returns set (target-name);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @AwardDateAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the AwardDateAxis and the base taxonomy member {$member.local-name}. Only extension members should be used with the axis AwardDateAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis AwardDateAxis. The only members allowed on this axis are extension members defined by the filer. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:72
Rule Version: 2.0"

severity error


assert US.0001.74 satisfied
/** Determine the members on the axis in the taxonomy using the definition linkbase **/

$allowed_members = navigate dimensions dimension-member descendants from SubsequentEventTypeAxis taxonomy $us-gaap returns set (target-name);

$member_extension = navigate dimensions dimension-member descendants from SubsequentEventTypeAxis returns set (target-name);

$unallowed_members = $member_extension - $allowed_members;

/** Evaluate if facts exists with the unallowable members **/

for ($member in $unallowed_members)
	$fact = {covered @SubsequentEventTypeAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the SubsequentEventTypeAxis and the unallowable member {$member.local-name}. 
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
			true
	else 
			$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis SubsequentEventTypeAxis. The only members allowed on this axis are {$allowed_members.join(', ')}. There are no facts associated with this member and axis.";
			true

message
"{$message_for_fact}

Rule Element Id:74
Rule Version: 2.0"

severity error

assert US.0001.75 satisfied

$allowed_base_member_tree = navigate dimensions dimension-member descendants from StatementEquityComponentsAxis taxonomy $us-gaap returns set (target-name);

$allowed_base_member_predefined = set(WarrantsNotSettleableInCashMember, ContingentConsiderationClassifiedAsEquityMember, EquityIssuedInBusinessCombinationMember, TrustForBenefitOfEmployeesMember);

$allowed_base_member = ($allowed_base_member_tree + $allowed_base_member_predefined);

$base_members = navigate dimensions dimension-member descendants from StatementEquityComponentsAxis where is_base($relationship.target) returns set (target-name);

$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @StatementEquityComponentsAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the StatementEquityComponentsAxis and the base taxonomy member {$member.local-name}. Only extension members and the elements defined as children of this axis in the US GAAP taxonomy should be used with the axis StatementEquityComponentsAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis StatementEquityComponentsAxis. The only members allowed on this axis are extension members defined by the filer and the elements defined as children of this axis in the US GAAP taxonomy. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:75
Rule Version: 2.0"

severity error

assert US.0001.76 satisfied

/** Use nested navigation as the StatementScenarioAxis in the US GAAP taxonomy is not a valid hypercube in all cases so the dimensions will not return all members. Specifically the 190000 group **/
$allowed_base_member = navigate domain-member descendants include start
     from (navigate dimension-domain children
           from StatementScenarioAxis
           taxonomy $us-gaap returns set)
     taxonomy $us-gaap
     returns set (target-name);
$base_members = navigate dimensions dimension-member descendants from StatementScenarioAxis where is_base($relationship.target) returns set (target-name);
$unallowed_base_members = $base_members - $allowed_base_member;

for ($member in $unallowed_base_members)
	$fact = {covered @StatementScenarioAxis = $member};
	if exists($fact)
		$message_for_fact = "The concept {$fact.concept.name.local-name} with a value of {$fact} is dimensionally qualified with the StatementScenarioAxis and the base taxonomy member {$member.local-name}. Only extension members and the elements defined as children of this axis in the US GAAP taxonomy should be used with the axis StatementScenarioAxis.
The properties of the fact for {$fact.concept.name.local-name} are:
Period: {$fact.period}
Dimensions: {$fact.dimensions.join(', ','=')} 
Unit: {$fact.unit}";
		true
	else 
		$message_for_fact = " The member {$member.local-name} is inappropriately used on the axis StatementScenarioAxis. The only members allowed on this axis are extension members defined by the filer and the elements defined as children of this axis in the US GAAP taxonomy. There are no facts associated with this member and axis.";
		true


message
"{$message_for_fact}

Rule Element Id:76
Rule Version: 2.0"

severity error

